name: packAndDockerImages
#触发机制，当main分支有创建tag时
on:
  create:
    branches:
      - main
    tags:
      - 'v*'
jobs:
  releasePackage:
    name: releaseOnGithub
    runs-on: ubuntu-latest
    steps:
      - name: SetOutput #处理Tag字符串并存进outputs
        id: vars
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/*/v}
      - name: SetUpGo
        uses: actions/setup-go@v3
        with:
          go-version: '1.17.3'
      - name: Checkout  #Checkout代码
        uses: actions/checkout@v3
      - name: GoTidy
        run: go mod tidy
      - name: Pack  #运行打包脚本
        run: |
          ./build/cmd/package.sh ${{ steps.vars.outputs.tag }}
          git config --global user.email "<>"
          git config --global user.name ${{ github.actor }}
          git add . && git commit -m -a
      - name: Create archives on Release   #创建各种系统架构下的二进制包并上传至release assets
        uses: goreleaser/goreleaser-action@v3.1.0
        with:
          version: latest
          args: release -f .goreleaser.yaml --rm-dist
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.actor }}
          path: dist/*
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: UploadAsset    #将打包脚本生成的tar包上传至release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./out/apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz
          asset_name: apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz
          asset_content_type: application/x-gzip-compressed
  dockerImage:
    needs: [releasePackage]
    name: buildDockerImage
    runs-on: ubuntu-latest
    steps:
      - name: SetupGo
        uses: actions/setup-go@v3
        with:
          go-version: '1.17.3'
      - uses: actions/checkout@v3
      - name: SetOutput
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/v}
      - name: GoTidy
        run: |
          go mod tidy
      - name: Pack  #运行打包脚本并且将生成的tar包复制至Dockerfile所在目录
        run: |
          ./build/cmd/package.sh ${{ steps.vars.outputs.tag }}
          cp ./out/apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz ./build/resources/apinto.linux.x64.tar.gz
      - name: Login Docker   #登录docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: buildImage
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/apinto-gateway:${{ steps.vars.outputs.tag }} -f ./build/resources/Dockerfile ./build/resources
      - name: pushImage
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/apinto-gateway:${{ steps.vars.outputs.tag }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/apinto-gateway:${{ steps.vars.outputs.tag }} ${{ secrets.DOCKER_USERNAME }}/apinto-gateway:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/apinto-gateway:latest
